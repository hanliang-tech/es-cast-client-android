package eskit.sdk.messenger.sample;import android.annotation.SuppressLint;import android.app.Application;import android.view.KeyEvent;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.arch.core.executor.ArchTaskExecutor;import androidx.lifecycle.AndroidViewModel;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import java.util.ArrayList;import java.util.List;import eskit.sdk.support.messenger.client.EsMessenger;import eskit.sdk.support.messenger.client.IEsMessenger;import eskit.sdk.support.messenger.client.bean.EsDevice;import eskit.sdk.support.messenger.client.bean.EsEvent;import eskit.sdk.support.messenger.client.core.EsCommand;/** * <br> * * <br> */@SuppressLint("RestrictedApi")public class MainViewModel extends AndroidViewModel implements IEsMessenger.MessengerCallback {    private static final String START_APP_PKG = "es.hello.world";    public MainViewModel(@NonNull Application application) {        super(application);        // 设置SDK回调        EsMessenger.get().setMessengerCallback(this);    }    private final MutableLiveData<List<EsDevice>> _deviceListData = new MutableLiveData<>();    public LiveData<List<EsDevice>> deviceListData = _deviceListData;    private final MutableLiveData<EsDevice> _currentDeviceData = new MutableLiveData<>();    public void setCurrentDevice(EsDevice device) {        _currentDeviceData.postValue(device);    }    //region 业务代码    public void startSearch() {        EsMessenger.get().search(getApplication());    }    public void stopSearch() {        EsMessenger.get().stop();        _deviceListData.postValue(null);        _currentDeviceData.postValue(null);    }    public void pingDevice() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsMessenger.get().ping(getApplication(), device);    }    public void startHomePage() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeEsAppCommand(START_APP_PKG)                .setDebug(true));    }    public void startHomePageWithParams() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsCommand.CmdArgs args = new EsCommand.CmdArgs("")                .put("str", "字符串")                .put("int", 1)                .put("float", 1.2)                .put("boolean", true)                ;        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeEsAppCommand(START_APP_PKG)                 .setEventData(args)                .setDebug(true));    }    public void startPlayerPage() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsCommand.CmdArgs args = new EsCommand.CmdArgs("player");        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeEsAppCommand(START_APP_PKG)                .setEventData(args)                .setDebug(true));    }    public void startPlayerPageWithParams() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsCommand.CmdArgs args = new EsCommand.CmdArgs("player")                .put("url", "https://hub.quicktvui.com/repository/public-files/video/dev/mp4/2.0/mp4-2.0.mp4");        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeEsAppCommand(START_APP_PKG)                .setEventData(args)                .setDebug(true));    }    public void play() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsCommand.CmdArgs args = new EsCommand.CmdArgs("player")                .put("action", "play");        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeCustomCommand("OnCustomEvent")                .setEventData(args));    }    public void pause() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsCommand.CmdArgs args = new EsCommand.CmdArgs("player")                .put("action", "pause");        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeCustomCommand("OnCustomEvent")                .setEventData(args));    }    public void closeEsApp() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeCmdCloseCommand(START_APP_PKG));    }    public void setVolumeUp() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeCmdKeyEventCommand(KeyEvent.KEYCODE_VOLUME_UP));    }    public void setVolumeDown() {        EsDevice device = _currentDeviceData.getValue();        if(device == null) return;        EsMessenger.get().sendCommand(getApplication(), device, EsCommand.makeCmdKeyEventCommand(KeyEvent.KEYCODE_VOLUME_DOWN));    }    public void onDestroy() {        // 停止并释放资源        EsMessenger.get().stop();    }    //endregion    //region IEsMessenger.MessengerCallback    @Override    public void onPingResponse(String deviceIp, int devicePort) {        ArchTaskExecutor.getInstance().postToMainThread(() -> {            Toast.makeText(getApplication(), "设备" + deviceIp + ":" + devicePort + "在线", Toast.LENGTH_SHORT).show();        });    }    @Override    public void onFindDevice(EsDevice device) {        List<EsDevice> devices = _deviceListData.getValue();        if (devices == null) {            devices = new ArrayList<>();        }        devices.add(device);        _deviceListData.postValue(devices);    }    @Override    public void onReceiveEvent(EsEvent event) {        ArchTaskExecutor.getInstance().postToMainThread(() -> {            Toast.makeText(getApplication(), event.getData(), Toast.LENGTH_SHORT).show();        });    }    //endregion}